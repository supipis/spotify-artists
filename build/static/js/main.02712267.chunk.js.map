{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["config","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","CountryList","props","useState","countries","id","map","country","className","selectedCountry","onClick","onCountrySelect","ArtistList","path","limit","where","field","operator","value","d","isLoading","artist","selectedArtistId","ArtistId","onArtistSelect","NameOfArtist","TracksList","setToken","tracks","setTracks","useEffect","artistId","axios","btoa","data","then","tokenresponse","console","log","access_token","trackresponse","catch","error","track","name","src","preview_url","controls","App","setSelectedCountry","setSelectedArtistId","firebase","countryName","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.02712267.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport './App.css'\nimport firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport axios from 'axios';\nimport ReactAudioPlayer from 'react-audio-player'\n\nimport { FirestoreProvider, FirestoreCollection } from \"@react-firebase/firestore\";\n\nvar config = {\n  apiKey: \"AIzaSyAkPEv9v08oOv8c3hD-8SEGJt6po6U0JKg\",\n  authDomain: \"artists-spotify.firebaseapp.com\",\n  projectId: \"artists-spotify\",\n  storageBucket: \"artists-spotify.appspot.com\",\n  messagingSenderId: \"237999941202\",\n  appId: \"1:237999941202:web:25b876a105fdeb8a35218b\"\n};\n\nfunction App() {\n\n  const [selectedCountry, setSelectedCountry] = useState('Sri Lanka')\n  const [selectedArtistId, setSelectedArtistId] = useState('')\n\n  function updateSelectedCountry(countryName) {\n    setSelectedCountry(countryName);\n    setSelectedArtistId('')\n  }\n\n  return (\n    <FirestoreProvider {...config} firebase={firebase}>\n\n      <div className=\"App\">\n        <h1>The World of Music</h1>\n        <CountryList onCountrySelect={updateSelectedCountry} selectedCountry={selectedCountry} />\n        <ArtistList selectedCountry={selectedCountry} onArtistSelect={setSelectedArtistId} selectedArtistId={selectedArtistId} />\n        <TracksList artistId={selectedArtistId} />\n      </div>\n\n    </FirestoreProvider>\n  )\n}\n\nfunction CountryList(props) {\n  let [countries, setCountries] = useState(['Sri Lanka', 'India', 'Pakistan', 'Nepal', 'Bhutan', 'Bangladesh', 'Maldives', 'South Korea', 'Spain'])\n  return <ul id='country'>\n\n    {countries.map(country => {\n      return <li className={props.selectedCountry == country ? 'selected' : ''} onClick={() => props.onCountrySelect(country)} id='countryList'>{country}</li>\n    })}\n  </ul>\n}\n\nfunction ArtistList(props) {\n  let [artists, setArtists] = useState();\n  return <ul id='artists'>\n    <FirestoreCollection path=\"/artists/\" limit={5} where={{ field: \"NameOfCountry\", operator: \"==\", value: props.selectedCountry }}>\n      {d => {\n        return d.isLoading ? \"Loading\" : d.value.map(artist => <li className={props.selectedArtistId == artist.ArtistId ? \"selected\" : ''} onClick={() => props.onArtistSelect(artist.ArtistId)} id='artist-list'> {artist.NameOfArtist} </li>)\n      }}\n    </FirestoreCollection>\n  </ul>\n}\n\nfunction TracksList(props) {\n  let [token, setToken] = useState('');\n  let [tracks, setTracks] = useState([])\n\n  const market = 'US';\n\n  useEffect(() => {\n\n    const id = props.artistId;\n    if (id != '') {\n      // Api call for retrieving token\n      axios('https://accounts.spotify.com/api/token', {\n        'method': 'POST',\n        'headers': {\n          'Content-Type': 'application/x-www-form-urlencoded',\n          'Authorization': 'Basic ' + btoa('b277afd5fab340199cf0f95e8f39c70e' + ':' + 'c55b5f3cdbc9429cbc293ce43b9f6394'),\n        },\n        data: 'grant_type=client_credentials'\n      }).then(tokenresponse => {\n        console.log(tokenresponse.data.access_token);\n        setToken(tokenresponse.data.access_token);\n\n        // Api call for retrieving tracks data\n        axios(`https://api.spotify.com/v1/artists/${id}/top-tracks?market=${market}`, {\n          'method': 'GET',\n          'headers': {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json',\n            'Authorization': 'Bearer ' + tokenresponse.data.access_token\n          }\n        }).then(trackresponse => {\n          console.log(trackresponse.data.tracks);\n          setTracks(trackresponse.data.tracks);\n        }).catch(error => console.log(error))\n      }).catch(error => console.log(error));\n    } else {\n      setTracks([])\n    }\n\n\n  }, [props.artistId])\n\n  return <div className='music-track'>\n    <ul id='tracks'>\n      {tracks.map(track => {\n        return <div className='player'>\n          <li id='track-list'>{track.name} <br />\n          <ReactAudioPlayer src={track.preview_url} controls /></li>\n        </div>\n      })}\n    </ul>\n  </div>\n}\n\n\n\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}